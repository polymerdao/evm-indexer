# Packets
type Packet @entity {
  id: ID!
  sendPacket: SendPacket @unique
  recvPacket: RecvPacket @unique
  writeAckPacket: WriteAckPacket @unique
  ackPacket: Acknowledgement @unique
  state: PacketStates!

  sendToRecvTime: Int
  sendToRecvGas: Int
  sendToAckTime: Int
  sendToAckGas: Int
  sendToRecvPolymerGas: Int
  sendToAckPolymerGas: Int

  catchupError: PacketCatchUpError @unique
}

enum PacketStates {
  SENT
  RECV
  WRITE_ACK
  ACK
  TIMEOUT
  WRITE_TIMEOUT
}

type SendPacket @entity {
  id: ID!
  dispatcherAddress: String!
  dispatcherType: String!
  dispatcherClientName: String!
  sourcePortAddress: String!
  srcChannelId: String!
  sourceChannel: Channel
  packet: String!
  sequence: BigInt!
  timeoutTimestamp: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt! @index
  transactionHash: String! @index
  chainId: Int!
  gas: BigInt!
  gasPrice: BigInt
  maxFeePerGas: BigInt
  maxPriorityFeePerGas: BigInt
  from: String!
  packetRelation: Packet @derivedFrom(field: "sendPacket")
  polymerTxHash: String @index
  polymerGas: Int
  polymerBlockNumber: BigInt
}

type RecvPacket @entity {
  id: ID!
  dispatcherAddress: String!
  dispatcherType: String!
  dispatcherClientName: String!
  destPortAddress: String!
  destChannelId: String!
  sequence: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt! @index
  transactionHash: String! @index
  chainId: Int!
  gas: BigInt!
  gasPrice: BigInt
  maxFeePerGas: BigInt
  maxPriorityFeePerGas: BigInt
  from: String!
  packet: Packet @derivedFrom(field: "recvPacket")
}

type WriteAckPacket @entity {
  id: ID!
  dispatcherAddress: String!
  dispatcherType: String!
  dispatcherClientName: String!
  writerPortAddress: String!
  writerChannelId: String!
  sequence: BigInt!
  ackPacketSuccess: Boolean!
  ackPacketData: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt! @index
  transactionHash: String! @index
  chainId: Int!
  gas: BigInt!
  gasPrice: BigInt
  maxFeePerGas: BigInt
  maxPriorityFeePerGas: BigInt
  from: String!
  packet: Packet @derivedFrom(field: "writeAckPacket")
  polymerTxHash: String @index
  polymerGas: Int
  polymerBlockNumber: BigInt
}

type Acknowledgement @entity {
  id: ID!
  dispatcherAddress: String!
  dispatcherType: String!
  dispatcherClientName: String!
  sourcePortAddress: String!
  sourceChannelId: String!
  sequence: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt! @index
  transactionHash: String! @index
  chainId: Int!
  gas: BigInt!
  gasPrice: BigInt
  maxFeePerGas: BigInt
  maxPriorityFeePerGas: BigInt
  from: String!
  packet: Packet @derivedFrom(field: "ackPacket")
}

type Timeout @entity {
  id: ID!
  dispatcherAddress: String!
  dispatcherType: String!
  dispatcherClientName: String!
  sourcePortAddress: String!
  sourceChannelId: String!
  sequence: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt! @index
  transactionHash: String! @index
  chainId: Int!
  gas: BigInt!
  gasPrice: BigInt
  maxFeePerGas: BigInt
  maxPriorityFeePerGas: BigInt
  from: String!
}

type WriteTimeoutPacket @entity {
  id: ID!
  dispatcherAddress: String!
  dispatcherType: String!
  dispatcherClientName: String!
  writerPortAddress: String!
  writerChannelId: String!
  sequence: BigInt!
  timeoutHeightRevisionNumber: BigInt!
  timeoutHeightRevisionHeight: BigInt!
  timeoutTimestamp: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt! @index
  transactionHash: String! @index
  chainId: Int!
  gas: BigInt!
  gasPrice: BigInt
  maxFeePerGas: BigInt
  maxPriorityFeePerGas: BigInt
  from: String!
}


# Channels
type Channel @entity{
  id: ID!
  channelId: String! @index
  portId: String! @index
  counterpartyPortId: String!  @index
  counterpartyChannelId: String!  @index
  version: String!
  ordering: Int!
  connectionHops: [String!]!
  blockNumber: BigInt!
  blockTimestamp: BigInt! @index
  transactionHash: String! @index
  state: ChannelStates!

  channelOpenInit: ChannelOpenInit @index
  channelOpenTry: ChannelOpenTry @index
  channelOpenAck: ChannelOpenAck @index
  channelOpenConfirm: ChannelOpenConfirm @index
  closeIbcChannel: CloseIbcChannel @index

  initToTryTime: Int
  initToAckTime: Int
  initToConfirmTime: Int
  initToTryGas: Int
  initToTryPolymerGas: Int
  initToAckGas: Int
  initToAckPolymerGas: Int
  initToConfirmGas: Int
  initToConfirmPolymerGas: Int

  catchupError: ChannelCatchUpError @unique
}

enum ChannelStates {
  INIT
  TRY
  OPEN
  CLOSED
}

type ChannelOpenInit @entity {
  id: ID!
  dispatcherAddress: String!
  dispatcherType: String!
  dispatcherClientName: String!
  portId: String!
  channelId: String!
  portAddress: String!
  version: String!
  ordering: Int!
  feeEnabled: Boolean!
  connectionHops: [String!]!
  counterpartyPortId: String!
  counterpartyChannelId: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt! @index
  transactionHash: String! @index
  chainId: Int!
  from: String!
  gas: BigInt!
  gasPrice: BigInt
  maxFeePerGas: BigInt
  maxPriorityFeePerGas: BigInt
  polymerTxHash: String @index
  polymerGas: Int
  polymerBlockNumber: BigInt
}

type ChannelOpenTry @entity {
  id: ID!
  dispatcherAddress: String!
  dispatcherType: String!
  dispatcherClientName: String!
  portId: String!
  channelId: String!
  portAddress: String!
  version: String!
  ordering: Int!
  feeEnabled: Boolean!
  connectionHops: [String!]!
  counterpartyPortId: String!
  counterpartyChannelId: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt! @index
  transactionHash: String! @index
  chainId: Int!
  gas: BigInt!
  maxFeePerGas: BigInt
  maxPriorityFeePerGas: BigInt
  from: String!
  polymerTxHash: String @index
  polymerGas: Int
  polymerBlockNumber: BigInt
}

type ChannelOpenAck @entity {
  id: ID!
  dispatcherAddress: String!
  dispatcherType: String!
  dispatcherClientName: String!
  portId: String!
  channelId: String!
  portAddress: String!
  counterpartyPortId: String!
  counterpartyChannelId: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt! @index
  transactionHash: String! @index
  chainId: Int!
  gas: BigInt!
  gasPrice: BigInt
  maxFeePerGas: BigInt
  maxPriorityFeePerGas: BigInt
  from: String!
  polymerTxHash: String @index
  polymerGas: Int
  polymerBlockNumber: BigInt
}

type ChannelOpenConfirm @entity {
  id: ID!
  dispatcherAddress: String!
  dispatcherType: String!
  dispatcherClientName: String!
  portId: String!
  channelId: String!
  portAddress: String!
  counterpartyPortId: String!
  counterpartyChannelId: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt! @index
  transactionHash: String! @index
  chainId: Int!
  gas: BigInt!
  gasPrice: BigInt
  maxFeePerGas: BigInt
  maxPriorityFeePerGas: BigInt
  from: String!
  polymerTxHash: String @index
  polymerGas: Int
  polymerBlockNumber: BigInt
}

type CloseIbcChannel @entity {
  id: ID!
  dispatcherAddress: String!
  dispatcherType: String!
  dispatcherClientName: String!
  portAddress: String!
  portId: String!
  channelId: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt! @index
  transactionHash: String! @index
  chainId: Int!
  gas: BigInt!
  gasPrice: BigInt
  maxFeePerGas: BigInt
  maxPriorityFeePerGas: BigInt
  from: String!
  polymerTxHash: String @index
  polymerGas: Int
  polymerBlockNumber: BigInt
}

type PacketCatchUpError @entity {
  id: ID!
  sendToRecvPolymerGas: Int!
  sendToAckPolymerGas: Int!

  packet: Packet @derivedFrom(field: "catchupError")
}

type ChannelCatchUpError @entity {
  id: ID!
  initToTryPolymerGas: Int!
  initToConfirmPolymerGas: Int!
  initToAckPolymerGas: Int!

  channel: Channel @derivedFrom(field: "catchupError")
}